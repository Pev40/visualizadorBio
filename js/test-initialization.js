/**
 * Archivo de prueba para verificar la inicializaci√≥n de las clases
 * Se ejecuta antes del archivo principal para detectar problemas
 */

console.log('=== Verificaci√≥n de Inicializaci√≥n ===');

// Verificar que jQuery est√© disponible
if (typeof $ !== 'undefined') {
    console.log('‚úÖ jQuery cargado correctamente');
} else {
    console.error('‚ùå jQuery no est√° disponible');
}

// Verificar que MSABrowser est√© disponible
if (typeof MSABrowser !== 'undefined') {
    console.log('‚úÖ MSABrowser cargado correctamente');
} else {
    console.error('‚ùå MSABrowser no est√° disponible');
}

// Verificar que EvaluadorAlineamiento est√© disponible
if (typeof EvaluadorAlineamiento !== 'undefined') {
    console.log('‚úÖ EvaluadorAlineamiento cargado correctamente');
} else {
    console.error('‚ùå EvaluadorAlineamiento no est√° disponible');
}

// Verificar que las clases de la arquitectura est√©n disponibles
if (typeof ServicioDatosAlineamiento !== 'undefined') {
    console.log('‚úÖ ServicioDatosAlineamiento cargado correctamente');
    
    // Probar la instanciaci√≥n
    try {
        const servicioDatos = new ServicioDatosAlineamiento();
        console.log('‚úÖ ServicioDatosAlineamiento se puede instanciar');
        console.log('üìÅ Archivos disponibles:', servicioDatos.obtenerArchivosDisponibles().length);
        console.log('üîß Modelos disponibles:', servicioDatos.obtenerModelosDisponibles().length);
    } catch (error) {
        console.error('‚ùå Error al instanciar ServicioDatosAlineamiento:', error);
    }
} else {
    console.error('‚ùå ServicioDatosAlineamiento no est√° disponible');
}

if (typeof ServicioAlineamiento !== 'undefined') {
    console.log('‚úÖ ServicioAlineamiento cargado correctamente');
    
    try {
        const servicioAlineamiento = new ServicioAlineamiento();
        console.log('‚úÖ ServicioAlineamiento se puede instanciar');
    } catch (error) {
        console.error('‚ùå Error al instanciar ServicioAlineamiento:', error);
    }
} else {
    console.error('‚ùå ServicioAlineamiento no est√° disponible');
}

if (typeof VistaAlineamiento !== 'undefined') {
    console.log('‚úÖ VistaAlineamiento cargado correctamente');
    
    try {
        const vista = new VistaAlineamiento();
        console.log('‚úÖ VistaAlineamiento se puede instanciar');
    } catch (error) {
        console.error('‚ùå Error al instanciar VistaAlineamiento:', error);
    }
} else {
    console.error('‚ùå VistaAlineamiento no est√° disponible');
}

if (typeof ControladorAlineamiento !== 'undefined') {
    console.log('‚úÖ ControladorAlineamiento cargado correctamente');
    
    try {
        const controlador = new ControladorAlineamiento();
        console.log('‚úÖ ControladorAlineamiento se puede instanciar');
    } catch (error) {
        console.error('‚ùå Error al instanciar ControladorAlineamiento:', error);
    }
} else {
    console.error('‚ùå ControladorAlineamiento no est√° disponible');
}

console.log('=== Fin de Verificaci√≥n ==='); 